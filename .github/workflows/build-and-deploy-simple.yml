name: Build and Deploy to Azure Container Apps

on:
  #push:
  #  branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY_NAME: "rpreucontinfraacr"                    # Replace with your ACR name
  IMAGE_NAME: "multiagents-web-api"
  RESOURCE_GROUP: "rg-chat-baseline-switzerlandnorth"            # Replace with your resource group
  CONTAINER_APP_NAME: "multiagents-web-api"        # Replace with your container app name
  CONTAINER_APP_ENVIRONMENT: "acaenv-genaiwl" # Replace with your container app environment

  AZURE_CLIENT_ID: ${{ secrets.ACAGENAIWL_AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.ACAGENAIWL_AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.ACAGENAIWL_AZURE_TENANT_ID }}

  ACR_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  ACR_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}  

jobs:
  build-container:
    environment: "dev"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Login via Azure CLI'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
  deploy:
    environment: "dev"
    runs-on: ubuntu-latest
    needs: build-container
    permissions:
      id-token: write
      contents: read
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Create or Update Azure Container App'
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Check if container app exists
          if az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "Container app exists, updating..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --set-env-vars \
                AZURE_KEY="${{ secrets.AZURE_KEY }}" \
                TAVILY_API_KEY="${{ secrets.TAVILY_API_KEY }}"
          else
            echo "Container app does not exist, creating..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENVIRONMENT }} \
              --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --target-port 8282 \
              --ingress external \
              --registry-server ${{ env.REGISTRY_NAME }}.azurecr.io \
              --registry-username ${{ env.ACR_USERNAME }} \
              --registry-password ${{ env.ACR_PASSWORD }} \
              --env-vars \
                AZURE_KEY="${{ secrets.AZURE_KEY }}" \
                TAVILY_API_KEY="${{ secrets.TAVILY_API_KEY }}" \
              --cpu 1.0 \
              --memory 2.0Gi \
              --min-replicas 1 \
              --max-replicas 3
          fi 
